{
  "hash": "89719b1db9cf1b93c65c329ea1952166",
  "result": {
    "markdown": "---\ntitle: \"Lost in Pandas - Part 3\"\nauthor: \"Nodar Okroshiashvili\"\ndate: \"2020-04-20\"\ncategories: [Data Science]\ntags: [Pandas, Data Analysis]\nkeywords: [pandas, python, data analysis, pandas tips and tricks, advance pandas, data transformation in pandas]\nexecute: \n  freeze: auto\n---\n\n# Introduction\n\nI'll show you how to split one column with repetitive index and/or value into multiple rows with unique index.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = {\n    \"ID\": [100, 100, 200, 200, 200, 300, 300, 400],\n    \"Product_Name\": [\"Apple\", \"Banana\", \"Cherry\", \"Apricot\", \"Apple\", \"Avocado\", \"Avocado\", \"Orange\"],\n}\n\ndf = pd.DataFrame(data)\n\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Product_Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100</td>\n      <td>Apple</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>100</td>\n      <td>Banana</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>200</td>\n      <td>Cherry</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>200</td>\n      <td>Apricot</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>200</td>\n      <td>Apple</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>300</td>\n      <td>Avocado</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>300</td>\n      <td>Avocado</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>400</td>\n      <td>Orange</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe see that our dataframe contains repetitive index (```ID```) and also not unique values for each unique index. Our aim is to convert ```Product_Name``` column into rows such as to keep index unique and in each new colum to be each product name. We need the following format:\n\n\n|   ID  | 0 | 1 | 2 |\n| --- | --- | --- | --- |\n| 100 | Apple | Banana | NaN |\n| 200 | Cherry | Apricot | Apple |\n| 300 | Avocado | Avocado | NaN |\n| 400 | Orange | NaN | NaN |\n\n\nTo achieve our aim we can use ```cumcount``` for new columns names to ```MultiIndex``` by ```set_index``` and reshape by ```unstack```. The second way to do this will be to create ```Series``` of ```lists``` and new ```DataFrame``` by contructor:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf.set_index([\"ID\", df.groupby(\"ID\").cumcount()])[\"Product_Name\"].unstack()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>100</th>\n      <td>Apple</td>\n      <td>Banana</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>Cherry</td>\n      <td>Apricot</td>\n      <td>Apple</td>\n    </tr>\n    <tr>\n      <th>300</th>\n      <td>Avocado</td>\n      <td>Avocado</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>Orange</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Second way of doing the same as above\n\ns = df.groupby(\"ID\")[\"Product_Name\"].apply(list)\n\npd.DataFrame(s.values.tolist(), index=s.index)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>100</th>\n      <td>Apple</td>\n      <td>Banana</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>Cherry</td>\n      <td>Apricot</td>\n      <td>Apple</td>\n    </tr>\n    <tr>\n      <th>300</th>\n      <td>Avocado</td>\n      <td>Avocado</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>400</th>\n      <td>Orange</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThat's good. We found the solution, but what if we want to have just two columns. I mean to aggregate ```Product_Name``` column values in one cell for each unique index? That's even easy to do. Use ```groupby``` then ```apply``` ```join``` and ```reset_index```\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf.groupby(\"ID\")[\"Product_Name\"].apply(\" \".join).reset_index(name=\"New_Product_Name\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>New_Product_Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>100</td>\n      <td>Apple Banana</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>200</td>\n      <td>Cherry Apricot Apple</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>300</td>\n      <td>Avocado Avocado</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>400</td>\n      <td>Orange</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pandas_tips_and_tricks_3_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}